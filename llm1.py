# -*- coding: utf-8 -*-
"""LLM1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ni4uFW_3mO173hMZtGT9UyBndxM9k1WN
"""

!pip install -q transformers einops accelerate bitsandbytes

from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline, BitsAndBytesConfig

import torch
import getpass
import os

device = "cuda:0" if torch.cuda.is_available() else "cpu"

device

torch.random.manual_seed(42)

os.environ["HF_TOKEN"] = getpass.getpass()

id_model = "microsoft/Phi-3-mini-4k-instruct"

model = AutoModelForCausalLM.from_pretrained(
    id_model,
    device_map = "cuda",
    torch_dtype = "auto",
    trust_remote_code = True,
    attn_implementation = "eager"
)

tokenizer = AutoTokenizer.from_pretrained(id_model)

pipe = pipeline("text-generation", model = model, tokenizer = tokenizer)

generation_args = {
    "max_new_tokens": 500,
    "return_full_text":False,
    "temperature":0.1, #0.1 up to 0.9
    "do_sample":True
}

prompt = "Explain about Quantum Computation"
output = pipe(prompt, **generation_args)
print(output[0]["generated_text"])

template = """<|system|>
You are a helpful assistant.<|end|>
<|user|>
"{}"<|end|>
<|assistant|>""".format(prompt)

output = pipe(template, **generation_args)
print(output[0]["generated_text"])

prompt2 = "What is AI?"

msg = [
    {"role":"system", "content":"you are a helpful assistant"}
    {"role":"user", "content":prompt2}
]
output = pipe(msg,**generation_args)
print(output[0]["generated_text"])

quantization_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_use_double_quant=True,
    bnb_4bit_compute_dtype=torch.bfloat16
)

model_id = "meta-llama/Meta-Llama-3-8B-Instruct"
mode_id = AutoModelForCausalLM.from_pretrained(model_id, quantization_config = quantization_config)
tokenizer = AutoTokenizer.from_pretrained(model_id)

prompt3 = ("")
msg2 = [{"role":"user","content":prompt}]

encodeds = tokenizer.apply_chat_template(msg2,return_tensors="pt")
model_inputs = encodeds.to(device)

generated_ids = model.generate(model_inputs, max_new_tokens=1000, do_sample=True, pad_token_id = tokenizer.eos_token_id)

decoded = tokenizer.batch_decode(generated_dis)

res = decoded[0]